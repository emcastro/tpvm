// @flow
// generated code


  


export class Var extends ExprBase {

  constructor (varId : string) {
    // generated code
    this.varId = notnull(varId)
  }

  children () {
    // generated code
    return [this.varId]
  }

  rewrite (subExprs) {
    // generated code
    return new Var(subExprs[0])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.varId, that.varId)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}




export class Literal extends ExprBase {

  constructor (value: any) {
    // generated code
    this.value = notnull(value)
  }

  children () {
    // generated code
    return [this.value]
  }

  rewrite (subExprs) {
    // generated code
    return new Literal(subExprs[0])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.value, that.value)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}




export class Apply extends ExprBase {

  constructor (operator: Expr, operands: Array<Expr>) {
    // generated code
    this.operator = notnull(operator)
    this.operands = notnull(operands)
  }

  children () {
    // generated code
    return [this.operator, this.operands]
  }

  rewrite (subExprs) {
    // generated code
    return new Apply(subExprs[0], subExprs[1])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.operator, that.operator)) return false
    if (rewriteEquals(this.operands, that.operands)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}




export class IfElse extends ExprBase {

  constructor (ifClause: Expr, thenClause: Expr, elseClause: Expr) {
    // generated code
    this.ifClause = notnull(ifClause)
    this.thenClause = notnull(thenClause)
    this.elseClause = notnull(elseClause)
  }

  children () {
    // generated code
    return [this.ifClause, this.thenClause, this.elseClause]
  }

  rewrite (subExprs) {
    // generated code
    return new IfElse(subExprs[0], subExprs[1], subExprs[2])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.ifClause, that.ifClause)) return false
    if (rewriteEquals(this.thenClause, that.thenClause)) return false
    if (rewriteEquals(this.elseClause, that.elseClause)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}




export class Lambda extends ExprBase {

  constructor (params: Array<Var>, body: Expr) {
    // generated code
    this.params = notnull(params)
    this.body = notnull(body)
  }

  children () {
    // generated code
    return [this.params, this.body]
  }

  rewrite (subExprs) {
    // generated code
    return new Lambda(subExprs[0], subExprs[1])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.params, that.params)) return false
    if (rewriteEquals(this.body, that.body)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}




export class Let extends ExprBase {

  constructor (defs: Map<string, Expr>, body: Expr) {
    // generated code
    this.defs = notnull(defs)
    this.body = notnull(body)
  }

  children () {
    // generated code
    return [this.defs, this.body]
  }

  rewrite (subExprs) {
    // generated code
    return new Let(subExprs[0], subExprs[1])
  }

  equals (other) {
    // generated code
    if (other === this) return true // fast-track
    if (other == null) return false
    if (other.constructor !== this.constructor) return false
    if (rewriteEquals(this.defs, that.defs)) return false
    if (rewriteEquals(this.body, that.body)) return false
    return true
  }

  notEquals (other) { return !(this.equals(other)) }
}



// EOF