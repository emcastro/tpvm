// @flow

import { Apply, Var, Let, Literal, Lambda, IfElse } from './Expr'

const code = Let.n(new Map([['__eq___1', new Literal('#eq')], ['__concat___2', new Literal('#list_concat')], ['head_3', Lambda.n(['list_19'], Apply.n(Var.n('list_19'), [new Literal(0)]))], ['tail_4', Lambda.n(['list_20'], Apply.n(Var.n('tailFrom_5'), [Var.n('list_20'), new Literal(1)]))], ['tailFrom_5', Lambda.n(['list_21', 'n_22'], Apply.n(new Literal('#list_tailFrom'), [Var.n('list_21'), Var.n('n_22')]))], ['sublist_6', Lambda.n(['list_23', 'from_24', 'to_25'], Apply.n(new Literal('#list_sublist'), [Var.n('list_23'), Var.n('from_24'), Var.n('to_25')]))], ['length_7', Lambda.n(['list_26'], Apply.n(new Literal('#list_length'), [Var.n('list_26')]))], ['empty_8', Lambda.n(['list_27'], Apply.n(Var.n('__eq___1'), [Apply.n(Var.n('length_7'), [Var.n('list_27')]), new Literal(0)]))], ['lone_9', Lambda.n(['list_28'], IfElse.n(Apply.n(Var.n('__eq___1'), [Apply.n(Var.n('length_7'), [Var.n('list_28')]), new Literal(1)]), Apply.n(Var.n('list_28'), [new Literal(0)]), Apply.n(new Literal('#error'), [new Literal('Size must be 1')])))], ['char_10', Var.n('lone_9')], ['flatmap_11', Lambda.n(['list_29', 'f_30'], Let.n(new Map([]), IfElse.n(Apply.n(Var.n('empty_8'), [Var.n('list_29')]), new Literal('#nil'), Let.n(new Map([]), Apply.n(Var.n('__concat___2'), [Apply.n(Var.n('f_30'), [Apply.n(Var.n('head_3'), [Var.n('list_29')])]), Apply.n(Var.n('map_12'), [Var.n('list_29'), Var.n('f_30')])])))))], ['map_12', Lambda.n(['list_31', 'f_32'], Apply.n(Var.n('flatmap_11'), [Var.n('list_31'), Lambda.n(['e_33'], Apply.n(new Literal('#list'), [Apply.n(Var.n('f_32'), [Var.n('e_33')])]))]))], ['filter_13', Lambda.n(['list_34', 'f_35'], Let.n(new Map([]), IfElse.n(Apply.n(Var.n('empty_8'), [Var.n('list_34')]), new Literal('#nil'), Let.n(new Map([]), IfElse.n(Apply.n(Var.n('f_35'), [Apply.n(Var.n('head_3'), [Var.n('list_34')])]), Apply.n(Var.n('__concat___2'), [Apply.n(new Literal('#list'), [Apply.n(Var.n('head_3'), [Var.n('list_34')])]), Apply.n(Var.n('filter_13'), [Apply.n(Var.n('tail_4'), [Var.n('list_34')]), Var.n('f_35')])]), Apply.n(Var.n('filter_13'), [Apply.n(Var.n('tail_4'), [Var.n('list_34')]), Var.n('f_35')]))))))], ['split_14', Lambda.n(['list_36', 'isDelim_37'], Let.n(new Map([]), IfElse.n(Apply.n(Var.n('empty_8'), [Var.n('list_36')]), new Literal('#nil'), Let.n(new Map([]), IfElse.n(Apply.n(Var.n('isDelim_37'), [Apply.n(Var.n('head_3'), [Var.n('list_36')])]), Apply.n(Var.n('__concat___2'), [Apply.n(new Literal('#list'), [new Literal('#nil')]), Apply.n(Var.n('split_14'), [Apply.n(Var.n('tail_4'), [Var.n('list_36')]), Var.n('isDelim_37')])]), Let.n(new Map([['suite_38', Apply.n(Var.n('split_14'), [Apply.n(Var.n('tail_4'), [Var.n('list_36')]), Var.n('isDelim_37')])]]), IfElse.n(Apply.n(Var.n('suite_38'), [new Literal('isEmpty')]), Apply.n(new Literal('#list'), [Apply.n(new Literal('#list'), [Apply.n(Var.n('head_3'), [Var.n('list_36')])])]), Apply.n(Var.n('__concat___2'), [Apply.n(new Literal('#list'), [Apply.n(Var.n('__concat___2'), [Apply.n(new Literal('#list'), [Apply.n(Var.n('head_3'), [Var.n('list_36')])]), Apply.n(Var.n('head_3'), [Var.n('suite_38')])])]), Apply.n(Var.n('tail_4'), [Var.n('suite_38')])]))))))))], ['foldLeft_15', Lambda.n(['list_39', 'zero_40', 'op_41'], Let.n(new Map([['loop_42', Lambda.n(['list_43', 'state_44'], Let.n(new Map([]), IfElse.n(Apply.n(Var.n('empty_8'), [Var.n('list_43')]), Var.n('state_44'), Let.n(new Map([]), Apply.n(Var.n('loop_42'), [Apply.n(Var.n('tail_4'), [Var.n('list_43')]), Apply.n(Var.n('op_41'), [Var.n('state_44'), Apply.n(Var.n('head_3'), [Var.n('list_43')])])])))))]]), Apply.n(Var.n('loop_42'), [Var.n('list_39'), Var.n('zero_40')])))], ['join_16', Lambda.n(['list_45', 'delimList_46'], Let.n(new Map([]), Apply.n(Var.n('foldLeft_15'), [Apply.n(Var.n('map_12'), [Var.n('list_45'), Lambda.n(['item_47'], Apply.n(Var.n('__concat___2'), [Var.n('delimList_46'), Var.n('list_45')]))]), new Literal('#nil'), Lambda.n(['x_48', 'y_49'], Apply.n(Var.n('__concat___2'), [Var.n('x_48'), Var.n('y_49')]))])))], ['file_17', Apply.n(new Literal('#readFile'), [new Literal('test')])], ['lines_18', Apply.n(Var.n('split_14'), [Var.n('file_17'), Lambda.n(['c_50'], Apply.n(Var.n('__eq___1'), [Var.n('c_50'), Apply.n(Var.n('char_10'), [new Literal(',')])]))])]]), Apply.n(Var.n('join_16'), [Var.n('lines_18'), Apply.n(Var.n('char_10'), [new Literal(';')])]))

console.log(code)
