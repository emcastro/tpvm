// @flow

import { eApply, eVar, eLet, eLiteral, eLambda, eIfElse } from './Expr'

const code = eLet(new Map([['__eq___1', eLiteral('#eq')], ['__concat___2', eLiteral('#list_concat')], ['head_3', eLambda(['list_19'], eApply(eVar('list_19'), [eLiteral(0)]))], ['tail_4', eLambda(['list_20'], eApply(eVar('tailFrom_5'), [eVar('list_20'), eLiteral(1)]))], ['tailFrom_5', eLambda(['list_21', 'n_22'], eApply(eLiteral('#list_tailFrom'), [eVar('list_21'), eVar('n_22')]))], ['sublist_6', eLambda(['list_23', 'from_24', 'to_25'], eApply(eLiteral('#list_sublist'), [eVar('list_23'), eVar('from_24'), eVar('to_25')]))], ['length_7', eLambda(['list_26'], eApply(eLiteral('#list_length'), [eVar('list_26')]))], ['empty_8', eLambda(['list_27'], eApply(eVar('__eq___1'), [eApply(eVar('length_7'), [eVar('list_27')]), eLiteral(0)]))], ['lone_9', eLambda(['list_28'], eIfElse(eApply(eVar('__eq___1'), [eApply(eVar('length_7'), [eVar('list_28')]), eLiteral(1)]), eApply(eVar('list_28'), [eLiteral(0)]), eApply(eLiteral('#error'), [eLiteral('Size must be 1')])))], ['char_10', eVar('lone_9')], ['flatmap_11', eLambda(['list_29', 'f_30'], eLet(new Map([]), eIfElse(eApply(eVar('empty_8'), [eVar('list_29')]), eLiteral('#nil'), eLet(new Map([]), eApply(eVar('__concat___2'), [eApply(eVar('f_30'), [eApply(eVar('head_3'), [eVar('list_29')])]), eApply(eVar('map_12'), [eVar('list_29'), eVar('f_30')])])))))], ['map_12', eLambda(['list_31', 'f_32'], eApply(eVar('flatmap_11'), [eVar('list_31'), eLambda(['e_33'], eApply(eLiteral('#list'), [eApply(eVar('f_32'), [eVar('e_33')])]))]))], ['filter_13', eLambda(['list_34', 'f_35'], eLet(new Map([]), eIfElse(eApply(eVar('empty_8'), [eVar('list_34')]), eLiteral('#nil'), eLet(new Map([]), eIfElse(eApply(eVar('f_35'), [eApply(eVar('head_3'), [eVar('list_34')])]), eApply(eVar('__concat___2'), [eApply(eLiteral('#list'), [eApply(eVar('head_3'), [eVar('list_34')])]), eApply(eVar('filter_13'), [eApply(eVar('tail_4'), [eVar('list_34')]), eVar('f_35')])]), eApply(eVar('filter_13'), [eApply(eVar('tail_4'), [eVar('list_34')]), eVar('f_35')]))))))], ['split_14', eLambda(['list_36', 'isDelim_37'], eLet(new Map([]), eIfElse(eApply(eVar('empty_8'), [eVar('list_36')]), eLiteral('#nil'), eLet(new Map([]), eIfElse(eApply(eVar('isDelim_37'), [eApply(eVar('head_3'), [eVar('list_36')])]), eApply(eVar('__concat___2'), [eApply(eLiteral('#list'), [eLiteral('#nil')]), eApply(eVar('split_14'), [eApply(eVar('tail_4'), [eVar('list_36')]), eVar('isDelim_37')])]), eLet(new Map([['suite_38', eApply(eVar('split_14'), [eApply(eVar('tail_4'), [eVar('list_36')]), eVar('isDelim_37')])]]), eIfElse(eApply(eVar('suite_38'), [eLiteral('isEmpty')]), eApply(eLiteral('#list'), [eApply(eLiteral('#list'), [eApply(eVar('head_3'), [eVar('list_36')])])]), eApply(eVar('__concat___2'), [eApply(eLiteral('#list'), [eApply(eVar('__concat___2'), [eApply(eLiteral('#list'), [eApply(eVar('head_3'), [eVar('list_36')])]), eApply(eVar('head_3'), [eVar('suite_38')])])]), eApply(eVar('tail_4'), [eVar('suite_38')])]))))))))], ['foldLeft_15', eLambda(['list_39', 'zero_40', 'op_41'], eLet(new Map([['loop_42', eLambda(['list_43', 'state_44'], eLet(new Map([]), eIfElse(eApply(eVar('empty_8'), [eVar('list_43')]), eVar('state_44'), eLet(new Map([]), eApply(eVar('loop_42'), [eApply(eVar('tail_4'), [eVar('list_43')]), eApply(eVar('op_41'), [eVar('state_44'), eApply(eVar('head_3'), [eVar('list_43')])])])))))]]), eApply(eVar('loop_42'), [eVar('list_39'), eVar('zero_40')])))], ['join_16', eLambda(['list_45', 'delimList_46'], eLet(new Map([]), eApply(eVar('foldLeft_15'), [eApply(eVar('map_12'), [eVar('list_45'), eLambda(['item_47'], eApply(eVar('__concat___2'), [eVar('delimList_46'), eVar('list_45')]))]), eLiteral('#nil'), eLambda(['x_48', 'y_49'], eApply(eVar('__concat___2'), [eVar('x_48'), eVar('y_49')]))])))], ['file_17', eApply(eLiteral('#readFile'), [eLiteral('test')])], ['lines_18', eApply(eVar('split_14'), [eVar('file_17'), eLambda(['c_50'], eApply(eVar('__eq___1'), [eVar('c_50'), eApply(eVar('char_10'), [eLiteral(',')])]))])]]), eApply(eVar('join_16'), [eVar('lines_18'), eApply(eVar('char_10'), [eLiteral(';')])]))

console.log(code)

console.log('====')

console.log(code.toString())

console.log('====')

console.log(code.toText())
