// Testbed 1
__eq__=#eq
__lt__=#lt
__concat__=#list_concat
__plus__=#plus
__minus__=#minus
__or__=(a,b)->if (a) a else b

// Type check debugging checker
__list_=#assertTypeList
__string_=#assertTypeString
__boolean_=#assertTypeBoolean
__number_=#assertTypeNumber

// Lists
_head(list)=list(0)
_tail(list)=list.tailFrom(1)
_tailFrom(list,n) = #list_tailFrom(list,n)
_sublist(list,from,to) = #list_sublist(list,from,to)
_length(list)=#list_length(list)
_empty(list)=list.length==0

_asList=#string_asList
_asString(list) = {
    list._list_.map(#fromCharCode).foldLeft("",#plus)
}

lone(list)=if(list.length == 1) list(0) else #error("Size must be 1")
char(s) = lone(s.asList)

//

_spy(self) = #spy(self)

_flatmap(list, f) = {
  _flatmap_(list, result) = {
    if (list.empty) result
    else {
      list.tail.flatmap_(result ++ f(list.head))
    }
  }

  list.flatmap_(#nil)
}

_map(list, f) = list.flatmap(e->#list(f(e)))

_filter(list, f) = {
  _filter_(list, result) = {
    if (list.empty) result
    else {
      if (f(list.head))
        list.tail.filter_(f, result ++ #list(list.head))
      else
        list.tail.filter_(f, result)
    }
}

 _filter_(list, #nil)
}

_split(list, isDelim) = {
  _split_(list, accumulator, result) = {
    if (list.empty) {
      result ++ #list(accumulator) // flush the accumulator
    } else {
      if (isDelim(list.head))
        list.tail.split_(#nil, result ++ #list(accumulator)) // start a new accumulator
      else 
        list.tail.split_(accumulator ++ #list(list.head), result) // put un the accumulator
    }
}

  if (list.empty) #nil else list.split_(#nil, #nil)
}

_foldLeft(list, zero, op) = {
  loop(list, state) = {
    if (list.empty) state
    else {
      loop(list.tail, state op list.head)
    }
  }

  loop(list,zero)
}

_join(list, delim) = {
  list.flatmap(item->delim++item)
}

integers(from, to) = {
  ints(from, result) = {
    if (from < to) ints(from+1, result ++ #list(from))
    else result
  }

  ints(from, to, #nil)
} 

/* ------------------ */


file = #readFile("test").asList

lines = file.split(c->c == char("\n"))
linesOfWords = lines.map(l->l.split(c->c == char(",")))

transformedLines = linesOfWords.map(words->words.join("|".asList))


transformedLines.map(x->#delay(500,x.asString).asList).join("$\n".asList).asString

