// Testbed 1
__eq__=#eq
__concat__=#list_concat
__plus__=#plus

// Lists
_head(list)=list(0)
_tail(list)=list.tailFrom(1)
_tailFrom(list,n) = #list_tailFrom(list,n)
_sublist(list,from,to) = #list_sublist(list,from,to)
_length(list)=#list_length(list)
_empty(list)=list.length==0

lone(list)=if(list.length == 1) list(0) else #error("Size must be 1")
char = lone

//

_spy(self) = #spy(self)

_flatmap(list, f) = {
    if (list.empty) #nil(list)
    else {
        f(list.head) ++ list.tail.flatmap(f)
    }
}

_map(list, f) = list.flatmap(e->#list(f(e))) // ici problème de type

_filter(list, f) = {
    if (list.empty) #nil(list)
    else {
        if (f(list.head))
            #list(list.head) ++ list.tail.filter(f) // ici problème de type
        else
            list.tail.filter(f)
    }
}

_split(list, isDelim) = {
    if (list.empty) #nil(list)
    else {
        if (isDelim(list.head)) // [ delim, a, b, c ] => [[],[a,b,c]]
            #list(#nil(list)) ++ list.tail.split(isDelim)
        else {
            suite = list.tail.split(isDelim)
            if (suite.empty)
                #list(#list(list.head))
            else
                #list(#list(list.head)++suite.head)++suite.tail
        }
    }
}

_foldLeft(list, zero, op) = {
    loop(list, state) = {
        if (list.empty) state
        else {
            loop(list.tail, state op list.head)
        }
    }

    loop(list,zero)
}

_join(list, delim) = {
    delimPseudoLine = #list(#list(delim))
    list.flatmap(item->delimPseudoLine++list).foldLeft(#nil(list), (x,y)->x++y)
}

/* ------------------ */

//file = #readFile("test")

//lines = file.split(c->c == char(","))

// main
//lines.join(char("|"))
#list(
    "@1".map(x->x), 
    #list(4,6).map(x->x),
    #nil("toto"),
    #nil(#list(1,2))    
)